//На основі контейнера list побудувати однозв’язні лінійні списки цілих чисел та 
//символьних рядків.Виконати операції створення нового елемента списку на його початку
//вилучення першого елемента списку, створення нового елемента списку у його кінці, вилучення останнього елемента списку, 
//виведення списку на екран.

#include <time.h>
#include <iostream>
#include <list>
#include <iterator>
#include <string.h>
#include <map>
#include <fstream>
using namespace std;


typedef struct MyStruct1
{
    int value;
    struct MyStruct1* next;
} OneListInt;


typedef struct MyStruct2
{
    string value;
    struct MyStruct2* next;
} OneListStr;

template<typename T>
class MyList
{    
    friend ifstream& operator >> (ifstream& ifs,  MyList<T>& List)
    {
        ifs.read((char*)&List, sizeof(MyList<T>));
        return ifs;
    }
    friend ofstream& operator << (ofstream& ofs, MyList<T>& List)
    {
        ofs.write((char*)&List, sizeof(MyList<T>));
        return ofs;
    }
public:
    list<T> g;

    MyList(list<T> lst)
    {
        this->g = lst;
    }
    ~MyList()
    {
        g.clear();
    }

    void showlist_int()
    {
        typename list <OneListInt > ::iterator inter;
        for (inter = g.begin(); inter != g.end(); ++inter)
            cout << '\t' << inter->value;
        cout << "\n\n";
    }
    void showlist_str()
    {
        typename list <OneListStr > ::iterator inter;
        for (inter = g.begin(); inter != g.end(); ++inter)
            cout << '\t' << inter->value;
        cout << "\n\n";
    }


    void operator++()
    {
        g.pop_back();
    }
    void operator--()
    {
        g.pop_front();
    }

    void operator+(T new_value)
    {
        g.push_back(new_value);
    }

    void operator-(T new_value)
    {
        g.push_front(new_value);
    }

};

OneListInt* Int_begin = NULL;
OneListInt* Int_end = NULL;
OneListInt* Int;
OneListInt* Int_;
OneListInt* New;

OneListStr* Str_begin = NULL;
OneListStr* Str_end = NULL;
OneListStr* Str;
OneListStr* Str_;
OneListStr* New_str;

void main()
{
    map<string, int> mapping;
    mapping["first"] = 1;
    mapping["last"] = 9;
    mapping["both"] = 2;
    mapping["noone"] = 0;

    srand(time(0));
    list<OneListInt> begin_of_list_int;
    string path_int;
    
    cout << "Enter the number of random integers: ";
    int n = 0;
    cin >> n;



    for (int i = 0; i < n; i++)
    {
        Int = (OneListInt*)malloc(sizeof(OneListInt));
        Int->value = rand();
        if (Int_begin == NULL)
        {
            Int->next = NULL;
            Int_begin = Int_end = Int;
        }
        else 
        {
            Int_ = Int_begin;
            while (Int_->next != NULL)
            {
                Int_ = Int_->next;
            }
            Int_->next = Int;
            Int ->next = NULL;
            Int_end = Int;
        }
        begin_of_list_int.push_back(*Int);
    }

    MyList<OneListInt> List_int(begin_of_list_int);
    cout << "Your random integers : ";
    List_int.showlist_int();

    cout << "Enter the integer which you want to add at the end: ";
    New = (OneListInt*)malloc(sizeof(OneListInt));
    cin >> New->value;
    Int_end->next = New;
    Int_end = New;
    New->next = NULL;
    List_int + *New;

    cout << "Enter the integer which you want to add at the begin: ";
    New = (OneListInt*)malloc(sizeof(OneListInt));
    cin >> New->value; // тут закічив учаді я
    New->next = Int_begin;
    Int_begin = New;
    List_int - *New;

    cout << "\nYour edited list:";
    List_int.showlist_int();
   
    cout << "Enter a path to the file: ";
    cin >> path_int;
    
    ofstream file_ptr_out;
    ifstream file_ptr_in;

    file_ptr_out.open(path_int);
    
    file_ptr_out << List_int;
    cout << "\tList of integers saved successfully\n";
    file_ptr_out.close();

 
    list<OneListStr> begin_of_list_str;
    string path_str;
    OneListStr Str_new;

    cout << "\nEnter your strings(0 to stop): ";
    string istr;
    for (int i = 0; i < 100; i++)
    {
        Str = new OneListStr;
        cin >> istr;
        if (istr == "0") {
            break;
        }
        Str->value.assign(istr);
        if (Str_begin == NULL)
        {
            Str->next = NULL;
            Str_begin = Str_end = Str;
        }
        else
        {
            Str_ = Str_begin;
            while (Str_->next != NULL)
            {
                Str_ = Str_->next;
            }
            Str_->next = Str;
            Str->next = NULL;
            Str_end = Str;
        }
        begin_of_list_str.push_back(*Str);
        
    }
    MyList<OneListStr> List_str(begin_of_list_str);
    cout << "Your strings : ";
    List_str.showlist_str();


    
    cout << "Enter the string which you want to add at the end: ";
    New_str = new OneListStr;
    cin >> New_str->value;
    Str_end->next = New_str;
    Str_end = New_str;
    New_str->next = NULL;
    List_str + *New_str;

    cout << "Enter the string which you want to add at the begin: ";
    cin >> New_str->value; // тут закічив учаді я
    New_str->next = Str_begin;
    Str_begin = New_str;
    List_str - *New_str;


    cout << "\nYour edited list:";
    List_str.showlist_str();
    
    
   
    cout << "Enter a path to the file: ";
    cin >> path_str;

    file_ptr_out.open(path_str);
    file_ptr_out << List_str;
    cout << "\tList of strings saved successfully\n";
    file_ptr_out.close();
   
    string path;
    cout << "\nEnter a path to file which you want open: ";
    cin >> path;

    if (path == path_int)
    {
        file_ptr_in.open(path);
        file_ptr_in >> List_int;
        file_ptr_in.close();

        cout << "\nWhich elemet you want to delete: first,last,both,noone - ";
        cin >> path;
        switch (mapping[path])
        {
        case 1:
            --List_int;
            break;
        case 9:
            ++List_int;
            break;
        case 2:
            --List_int;
            ++List_int;
            break;
        default:
            break;
        }
        List_int.showlist_int();
    } 
    if (path == path_str)
    {
        file_ptr_in.open(path);
        file_ptr_in >> List_str;
        file_ptr_in.close();

        cout << "\nWhich elemet you want to delete: first,last,both,noone - ";
        cin >> path;
        switch (mapping[path])
        {
        case 1:
            --List_str;
            break;
        case 9:
            ++List_str;
            break;
        case 2:
            --List_str;
            ++List_str;
            break;
        default:
            break;
        }
        cout << "\nYour edited list:";
        List_str.showlist_str();
    }
}
