#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <iostream>
using namespace std;

class Fraction
{
	friend istream& operator>>(istream& in, Fraction& Fr)
	{
		return in >> *Fr.numerator >> *Fr.denominator;
	}
	friend ostream& operator<<(ostream& out, const Fraction& Fr)
	{
		return out << *Fr.numerator << "/" << *Fr.denominator << endl;
	}


private:
	static Fraction* singleObject;
	static int count;

	int* numerator = new int;
	int* denominator = new int;


	Fraction() { *numerator = 0; *denominator = 10; cout << "Constructor complete \n"; }

	Fraction(const Fraction& CopyFromME)
	{
		this->numerator = CopyFromME.numerator;
		this->denominator = CopyFromME.denominator;
		cout << "Constructor complete \n";
	}
	Fraction(int a, int b) { *numerator = a; *denominator = b; cout << "Constructor complete \n"; }
public:
	static Fraction& getInstance()

	{

		if (count == 0)

		{
			count = 1;
			singleObject = new Fraction();

		}

		return *singleObject;

	};

	~Fraction() { delete numerator; delete denominator; cout << "Destructor complete \n"; }


	int Get_Num() { return *this->numerator; }

	int Get_Den() { return *this->denominator; }


	void Set_Num(int a) { *this->numerator = a; }

	void Set_Den(int b) { *this->denominator = b; }


	//void Add(Fraction&, Fraction&); // Додавання

	//void Sub(Fraction&, Fraction&);// Віднімання

	//void Multi(Fraction&, Fraction&);//Множення

	void Div(Fraction&, Fraction&);// Ділення

	void SwapF(Fraction&);

	void Simpl(void); // спрощення

	Fraction* operator+(Fraction& fr)
	{
		Fraction* f = new Fraction;
		*f->denominator = *fr.denominator * (*this->denominator);
		*f->numerator = (*this->numerator) * (*fr.denominator) + (*fr.numerator) * (*this->denominator);

		return f;
	}

	bool operator>(Fraction& fr)
	{
		if (((double)*this->numerator) / (*this->denominator) >= ((double)*fr.numerator) / (*fr.denominator))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

};

void  Fraction::SwapF(Fraction& Swap_with_me)
{
	int save = this->Get_Num();
	this->Set_Num(Swap_with_me.Get_Num());
	Swap_with_me.Set_Num(save);

	save = this->Get_Den();
	this->Set_Den(Swap_with_me.Get_Den());
	Swap_with_me.Set_Den(save);
}

//void Fraction::Add(Fraction& First, Fraction& Second)// Додавання
//{
//	this->Set_Num(First.Get_Num() * Second.Get_Den() + Second.Get_Num() * First.Get_Den());
//	this->Set_Den(First.Get_Den() * Second.Get_Den());
//}
//
//void Fraction::Sub(Fraction& First, Fraction& Second)//Віднімання
//{
//	this->Set_Num(First.Get_Num() * Second.Get_Den() - Second.Get_Num() * First.Get_Den());
//	this->Set_Den(First.Get_Den() * Second.Get_Den());
//}
//
//void Fraction::Multi(Fraction& First, Fraction& Second)//Множення
//{
//	this->Set_Num(First.Get_Num() * Second.Get_Num());
//	this->Set_Den(First.Get_Den() * Second.Get_Den());
//}
//
void Fraction::Div(Fraction& First, Fraction& Second)// Ділення
{
	this->Set_Num(First.Get_Num() * Second.Get_Den());
	this->Set_Den(First.Get_Den() * Second.Get_Num());
}

void Fraction::Simpl(void)
{
	int nod = 1;
	for (int i = this->Get_Num(); i > 0; i--) {
		if (this->Get_Num() % i == 0 && this->Get_Den() % i == 0) {
			nod = i;
			break;
		}
	}
	int a = this->Get_Num();
	this->Set_Num(a /= nod);

	a = this->Get_Den();
	this->Set_Den(a /= nod);
}

Fraction* Mas_of_Fraction[100];

int InPut();
void Swap(int);

int Fraction::count = 0;
Fraction* Fraction::singleObject = 0;

void main(void)
{
	Fraction& First = Fraction::getInstance();
	cout << "First:\n";
	cin >> First;
	First.Simpl();
	cout << "First:" << First;

	Fraction& Second = Fraction::getInstance();
	cout << "Second:\n";
	cin >> Second;
	Second.Simpl();
	cout << "Second:" << Second;
	cout << "First:" << First;
